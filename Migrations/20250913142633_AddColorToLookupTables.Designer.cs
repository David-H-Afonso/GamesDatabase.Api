// <auto-generated />
using GamesDatabase.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GamesDatabase.Api.Migrations
{
    [DbContext(typeof(GamesDbContext))]
    [Migration("20250913142633_AddColorToLookupTables")]
    partial class AddColorToLookupTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("GamesDatabase.Api.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT")
                        .HasColumnName("comment");

                    b.Property<int?>("Completion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("completion");

                    b.Property<string>("Cover")
                        .HasColumnType("TEXT")
                        .HasColumnName("cover");

                    b.Property<int?>("Critic")
                        .HasColumnType("INTEGER")
                        .HasColumnName("critic");

                    b.Property<string>("Finished")
                        .HasColumnType("TEXT")
                        .HasColumnName("finished");

                    b.Property<int?>("Grade")
                        .HasColumnType("INTEGER")
                        .HasColumnName("grade");

                    b.Property<string>("Logo")
                        .HasColumnType("TEXT")
                        .HasColumnName("logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int?>("PlatformId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("platform_id");

                    b.Property<int?>("PlayWithId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("play_with_id");

                    b.Property<int?>("PlayedStatusId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("played_status_id");

                    b.Property<string>("Released")
                        .HasColumnType("TEXT")
                        .HasColumnName("released");

                    b.Property<int?>("Score")
                        .HasColumnType("INTEGER")
                        .HasColumnName("score");

                    b.Property<string>("Started")
                        .HasColumnType("TEXT")
                        .HasColumnName("started");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status_id");

                    b.Property<int?>("Story")
                        .HasColumnType("INTEGER")
                        .HasColumnName("story");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.HasIndex("PlayWithId");

                    b.HasIndex("PlayedStatusId");

                    b.HasIndex("StatusId");

                    b.ToTable("game", (string)null);
                });

            modelBuilder.Entity("GamesDatabase.Api.Models.GamePlatform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("sort_order");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("game_platform", (string)null);
                });

            modelBuilder.Entity("GamesDatabase.Api.Models.GamePlayWith", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("sort_order");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("game_play_with", (string)null);
                });

            modelBuilder.Entity("GamesDatabase.Api.Models.GamePlayedStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("sort_order");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("game_played_status", (string)null);
                });

            modelBuilder.Entity("GamesDatabase.Api.Models.GameStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("sort_order");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("game_status", (string)null);
                });

            modelBuilder.Entity("GamesDatabase.Api.Models.Game", b =>
                {
                    b.HasOne("GamesDatabase.Api.Models.GamePlatform", "Platform")
                        .WithMany("Games")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GamesDatabase.Api.Models.GamePlayWith", "PlayWith")
                        .WithMany("Games")
                        .HasForeignKey("PlayWithId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GamesDatabase.Api.Models.GamePlayedStatus", "PlayedStatus")
                        .WithMany("Games")
                        .HasForeignKey("PlayedStatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GamesDatabase.Api.Models.GameStatus", "Status")
                        .WithMany("Games")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Platform");

                    b.Navigation("PlayWith");

                    b.Navigation("PlayedStatus");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("GamesDatabase.Api.Models.GamePlatform", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("GamesDatabase.Api.Models.GamePlayWith", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("GamesDatabase.Api.Models.GamePlayedStatus", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("GamesDatabase.Api.Models.GameStatus", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
